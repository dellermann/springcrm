/*
 * build.gradle
 *
 * Copyright (c) 2011-2018, Daniel Ellermann
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


import java.nio.file.Path
import java.text.SimpleDateFormat
import org.apache.tools.ant.filters.ReplaceTokens


/*===============================================*\
 *
 *  Build process
 *
\*===============================================*/

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath "com.bertramlabs.plugins:coffee-asset-pipeline:$assetPipelineVersion"
        classpath "com.bertramlabs.plugins:handlebars-asset-pipeline:$assetPipelineVersion"
        classpath "com.bertramlabs.plugins:sass-asset-pipeline:$assetPipelineVersion"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath 'org.grails.plugins:i18n-asset-pipeline:2.0.0'
        classpath 'org.grails.plugins:views-gradle:1.2.4'
    }
}

//plugins {
//    id 'io.spring.dependency-management' version '0.5.4.RELEASE'
//}



/*===============================================*\
 *
 *  Project build
 *
\*===============================================*/

version '3.0.0'
group 'org.amcworld'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.grails.grails-web'
apply plugin: 'com.energizedwork.idea-project-components'
apply plugin: 'asset-pipeline'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'org.grails.plugins.views-json'
apply plugin: 'project-report'

//apply plugin: 'org.grails.grails-doc'
//apply plugin: 'org.springframework.boot'

ext {
    dateFormat = new SimpleDateFormat('''yyyy-MM-dd'T'HH:mm:ssZ''')
//    grailsVersion = project.grailsVersion
//    gradleWrapperVersion = project.gradleWrapperVersion
}
ext['mongodb.version'] = '3.4.2'

assets {
    configOptions = [
        less: [compiler: 'standard']
    ]
    enableSourceMaps = true
    excludes = [
        // stylesheets
        'bootstrap/**.scss',
        'font-awesome/**.scss',
        'js-calc/**.scss',
        'selectize/**.scss',
        'vat-calc/**.scss',

        // scripts
        'bootstrap/*.js',
        'jquery/*.js',
        'jqueryui/*.js',
        'polyfilles/*.js',
        'selectize/*.js',
        'widgets/**'
    ]
    minifyCss = true
    minifyJs = true
}

repositories {
    mavenLocal()
    maven { url 'https://repo.grails.org/grails/core' }
}

//dependencyManagement {
//    imports {
//        mavenBom "org.grails:grails-bom:${grailsVersion}"
//    }
//    applyMavenExclusions false
//}

dependencies {
    compile 'org.springframework.boot:spring-boot-autoconfigure'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'

    compile 'org.grails:grails-core'
    compile 'org.grails:grails-logging'
    compile 'org.grails:grails-plugin-databinding'
    compile 'org.grails:grails-plugin-i18n'
    compile 'org.grails:grails-plugin-interceptors'
    compile 'org.grails:grails-plugin-rest'
    compile 'org.grails:grails-plugin-services'
    compile 'org.grails:grails-plugin-url-mappings'
    compile 'org.grails:grails-web-boot'

    compile 'org.grails.plugins:async'
    compile 'org.grails.plugins:cache'
    compile 'org.grails.plugins:events'
    compile 'org.grails.plugins:gsp'
    compile 'org.grails.plugins:scaffolding'
    compile 'org.grails.plugins:views-json:1.1.2'

    // Grails plugins
    compile "com.bertramlabs.plugins:coffee-asset-pipeline:$assetPipelineVersion"
    compile "com.bertramlabs.plugins:handlebars-asset-pipeline:$assetPipelineVersion"
    compile "com.bertramlabs.plugins:sass-asset-pipeline:$assetPipelineVersion"
    compile 'org.grails.plugins:fields:2.1.5'
    compile 'org.grails.plugins:grails-markdown:3.0.0'
    compile 'org.grails.plugins:mongodb:6.1.3'
    compile 'org.grails.plugins:spring-security-core:3.2.0.M1'

    compile 'org.grails.plugins:mail:2.0.0.RC6'

    profile 'org.grails.profiles:web'

    // SpringCRM dependencies
    compile 'com.google.apis:google-api-services-calendar:v3-rev157-1.21.0'
    compile 'com.google.gdata:core:1.47.1'
    compile 'commons-fileupload:commons-fileupload:1.3.1'
    compile 'commons-io:commons-io:2.4'
    compile 'jmimemagic:jmimemagic:0.1.2'
    compile 'org.apache.commons:commons-vfs2:2.0'
    compile 'org.apache.httpcomponents:httpclient:4.3.2'
    compile 'org.apache.xmlgraphics:fop:1.0'
    compile files('lib/groovy-ldap.jar')

    runtime "com.bertramlabs.plugins:asset-pipeline-grails:$assetPipelineVersion"
    runtime 'org.grails.plugins:i18n-asset-pipeline:2.0.0'

    runtime 'net.sf.barcode4j:barcode4j-fop-ext-complete:2.0'
    runtime 'net.sf.offo:fop-hyph:1.2'

    testCompile 'com.github.fakemongo:fongo:2.1.0'
    testCompile 'org.grails:grails-gorm-testing-support'
    testCompile 'org.grails:grails-web-testing-support'
    testCompile 'org.grails.plugins:geb'
    // testCompile "org.gebish:geb-spock:${gebVersion}"

    testRuntime 'org.seleniumhq.selenium:selenium-api:3.6.0'
    testRuntime 'org.seleniumhq.selenium:selenium-chrome-driver:3.6.0'
    testRuntime 'org.seleniumhq.selenium:selenium-firefox-driver:3.6.0'
    testRuntime 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.52.0'

    console 'org.grails:grails-console'
}

/* compiling */
processResources
    .filesMatching(['**/*.groovy', '**/*.properties', '**/*.xml', '**/*.yml']) {
        filter(
            ReplaceTokens, tokens: [
                'info.app.buildNumber': computeBuildNumber(1L).toString(),
                'info.app.buildDate': ext.dateFormat.format(new Date()),
                'app.version': project.version
            ]
        )
    }

/* testing */
test {
    filter {
        includeTestsMatching '*Spec'
    }
}

/* running */
bootRun {
    jvmArgs '-Dspring.output.ansi.enabled=always'
    addResources = true
}

/* documentation */
groovydoc {
    docTitle = "SpringCRM API v${version}"
    windowTitle = "SpringCRM API v${version}"
}

/* IDE support */
eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                Path projectPath = projectDir.toPath()
                classpath.entries
                    .each {

                        // transform to relative paths
                        if (it.kind == 'lib') {
                            Path p = projectPath.relativize(
                                file(it.path).toPath()
                            )
                            it.path = p.toString()
                        }
                    }
                    .removeAll {

                        // remove entry "gsp-classes"
                        it.kind == 'lib' && it.path == 'gsp-classes'
                    }
            }
        }
    }
    pathVariables(
        GRADLE_CACHE: file("${System.getProperty('user.home')}/.gradle"),
        M2_REPO: file("${System.getProperty('user.home')}/.m2/repository")
    )
    project {
        natures 'org.springsource.ide.eclipse.gradle.core.nature'
    }
}


long computeBuildNumber(long offset = 0L) {
    long buildNumber = 0L

    File buildNumberFile = file('grails-app/conf/buildNumber')
    if (buildNumberFile.exists()) {
        buildNumber = buildNumberFile.text.trim() as long
        if (offset > 0L) buildNumber += offset
    }
    if (offset > 0L) buildNumberFile.text = buildNumber.toString()

    buildNumber
}
