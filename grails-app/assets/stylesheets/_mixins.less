//
// _mixins.less
//
// Copyright (c) 2011-2016, Daniel Ellermann
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//


// Generates rules to size the labels and control containers for column groups
// depending on the screen size.
//
// @param class the name of the screen size class, e. g. sm, md, or lg
// @param cols  the number of columns which should be used for the label
//
.make-control-sizes(@class, @cols) {
  @var: "screen-@{class}-min";
  @d: (2 * @grid-columns);

  @media (min-width: @@var) {
    .column-group > .column:only-child {
      .control-label {
        width: percentage(@cols / @d);
      }
      .control-container {
        width: percentage((@d - @cols) / @d);
      }
    }
    .control-label {
      width: percentage(@cols / @grid-columns);
    }
    .control-container {
      width: percentage((@grid-columns - @cols) / @grid-columns);
    }
  }
}

// Generates rules to size the labels and control containers for column groups
// depending on the screen size.
//
// @param class   the name of the screen size class, e. g. sm, md, or lg
// @param cols    the number of columns which should be used for the label
// @param suffix  any suffix which should be appended to the control-label and
//                control-container selectors
//
.make-control-sizes(@class, @cols, @suffix) {
  @var: "screen-@{class}-min";
  @d: (2 * @grid-columns);
  @label-selector: ~".control-label@{suffix}";
  @container-selector: ~".control-container@{suffix}";

  @media (min-width: @@var) {
    .column-group > .column:only-child {
      @{label-selector} {
        width: percentage(@cols / @d);
      }
      @{container-selector} {
        width: percentage((@d - @cols) / @d);
      }
    }
  }
}

// Generates a rule that specifies the width of the fixed toolbar for the given
// screen size class.
//
// @param class the given screen size class, e. g. "sm", "md" etc.
//
.make-fixed-title-toolbar(@class) {
  @container-var: "container-@{class}";
  @size-var: "screen-@{class}-min";

  @media (min-width: @@size-var) {
    .title-toolbar.fixed {
      margin-left: (-@@container-var / 2);
      width: @@container-var;
    }
  }
}

// Generates a colored variant of a popover using the given class.
//
// @param class the given class, e. g. "success", "warning", "danger" etc.
//
.popover-variant(@class) {
  @bg-var: "alert-@{class}-bg";
  @border-var: "alert-@{class}-border";
  @text-var: "alert-@{class}-text";

  .arrow-variant(@dir) {
    @property: ~"border-@{dir}-color";

    &.@{dir} > .arrow {
      @{property}: @@border-var;

      &:after {
        @{property}: @@bg-var;
      }
    }
  }

  .popover-@{class} {
    background-color: @@bg-var;
    border-color: @@border-var;
    color: @@text-var;

    .arrow-variant(top);
    .arrow-variant(right);
    .arrow-variant(bottom);
    .arrow-variant(left);
  }
}
