/*
 * ProxyAuthorizationCodeFlow.groovy
 *
 * Copyright (c) 2011-2014, Daniel Ellermann
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


package org.amcworld.springcrm.google

import com.google.api.client.auth.oauth2.BearerToken
import com.google.api.client.auth.oauth2.Credential
import com.google.api.client.auth.oauth2.DataStoreCredentialRefreshListener
import com.google.api.client.auth.oauth2.StoredCredential
import com.google.api.client.auth.oauth2.TokenResponse
import com.google.api.client.auth.oauth2.Credential.AccessMethod
import com.google.api.client.http.BasicAuthentication
import com.google.api.client.http.GenericUrl
import com.google.api.client.http.HttpTransport
import com.google.api.client.json.JsonFactory
import com.google.api.client.util.store.DataStore


/**
 * The class {@code ProxyAuthorizationCodeFlow} encapsulates the code flow by
 * obtaining the access and refresh token for access to Google using the AMC
 * World OAuth2 proxy.
 *
 * @author  Daniel Ellermann
 * @version 1.4
 * @since   1.0
 */
class ProxyAuthorizationCodeFlow {

    //-- Instance variables ---------------------

    AccessMethod accessMethod
    DataStore dataStore
    JsonFactory jsonFactory
    HttpTransport transport


    //-- Constructors ---------------------------

    /**
     * Creates a new instance for the OAuth2 authentication code flow via the
     * AMC World proxy.
     *
     * @param transport     the HTTP transport instance
     * @param jsonFactory   the JSON factory used to create JSON parsers
     */
    ProxyAuthorizationCodeFlow(HttpTransport transport,
                               JsonFactory jsonFactory)
    {
        this.transport = transport
        this.jsonFactory = jsonFactory
        this.accessMethod = BearerToken.authorizationHeaderAccessMethod()
        this.dataStore =
            UserCredentialDataStoreFactory.defaultInstance.createDataStore(
                StoredCredential.DEFAULT_DATA_STORE_ID
            )
    }


    //-- Public methods -------------------------

    /**
     * Creates a credential from the given token response and stores it for the
     * the given user in the underlying store.
     *
     * @param response  the given token request as received from the proxy
     * @param userId    the user name
     * @return          the created credential
     */
    Credential createAndStoreCredential(TokenResponse response, String userId) {
        Credential credential = newCredential(userId)
        credential.fromTokenResponse = response
        dataStore.set userId, new StoredCredential(credential)
        credential
    }

    /**
     * Loads the credential for the given user.
     *
     * @param userId    the given user name
     * @return          the credential; {@code null} if no credential for the
     *                  given user is available
     */
    Credential loadCredential(String userId) {
        StoredCredential storedCredential = dataStore.get(userId)
        if (!storedCredential) {
            return null
        }

        Credential credential = newCredential(userId)
        credential.accessToken = storedCredential.accessToken
        credential.expirationTimeMilliseconds = storedCredential.expirationTimeMilliseconds
        credential.refreshToken = storedCredential.refreshToken
        credential
    }

    /**
     * Obtains the credential from the proxy and stores it for the given user
     * in the underlying store.
     *
     * @param userId    the user name
     * @param clientId  the client ID generated by the proxy
     * @return          the created credential
     */
    Credential obtainAndStoreCredential(String userId, String clientId) {
        def req = new ProxyRequest(transport, jsonFactory, 'getToken')
        req.put 'clientId', clientId
        ProxyResponse response = req.execute()
        createAndStoreCredential response.tokenResponse, userId
    }

    /**
     * Registers this application as client at the proxy.
     *
     * @param redirectUrl   the URL which is to call when the proxy has
     *                      received the credential
     * @return              a URL to redirect the user to in order to
     *                      authenticate at the server
     */
    String register(String redirectUrl) {
        def req = new ProxyRequest(transport, jsonFactory, 'register')
        req.put 'redirectUrl', redirectUrl
        ProxyResponse response = req.execute()
        response.get 'url'
    }

    /**
     * Revokes access to the server by sending a revoke request to the proxy
     * and deleting the credential in the underlying store.
     *
     * @param userId    the user name
     */
    void revoke(String userId) {
        def credential = loadCredential(userId)
        if (credential != null) {
            def req = new ProxyRequest(transport, jsonFactory, 'revoke')
            req.put 'token', credential.accessToken
            req.execute()

            dataStore.delete userId
        }
    }


    //-- Non-public methods ---------------------

    /**
     * Creates a new credential for the given user name.
     *
     * @param userId    the user name
     * @return          the created credential
     */
    private Credential newCredential(String userId) {
        new ProxyCredential.Builder(accessMethod)
            .setTransport(transport)
            .setJsonFactory(jsonFactory)
            .setTokenServerUrl(
                new GenericUrl('https://server.example.com/token')
            )
            .setClientAuthentication(
                new BasicAuthentication('s6BhdRkqt3', '7Fjfp0ZBr1KtDRbnfVdmIw')
            )
            .setRefreshListeners([
                new DataStoreCredentialRefreshListener(userId, dataStore)
            ])
            .build()
    }
}
