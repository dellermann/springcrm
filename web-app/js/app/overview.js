// Generated by CoffeeScript 1.6.1
(function() {
  var $, OverviewPanelsWidget;

  $ = jQuery;

  OverviewPanelsWidget = {
    options: {
      addPanelLink: "#add-panel",
      addPanelUrl: null,
      columns: ".overview-column",
      movePanelUrl: null,
      panelList: "#panel-list",
      panels: ".springcrm-overviewpanels-panel",
      removePanelUrl: null
    },
    _computeYList: function($col) {
      var yList;
      yList = [0];
      $col.find(this.options.panels).each(function() {
        var $this;
        $this = $(this);
        return yList.push($this.position().top + $this.outerHeight(true));
      });
      return yList;
    },
    _create: function() {
      var $columns, elem, opts, _ref, _ref1, _ref2,
        _this = this;
      $ = jQuery;
      elem = this.element;
      opts = this.options;
      if ((_ref = opts.addPanelUrl) == null) {
        opts.addPanelUrl = elem.data("add-panel-url");
      }
      if ((_ref1 = opts.movePanelUrl) == null) {
        opts.movePanelUrl = elem.data("move-panel-url");
      }
      if ((_ref2 = opts.removePanelUrl) == null) {
        opts.removePanelUrl = elem.data("remove-panel-url");
      }
      this.$panels = elem.find(opts.panels).each(function(idx, panel) {
        return _this._initPanel($(panel));
      });
      this.$columns = $columns = elem.find(opts.columns).droppable({
        drop: function(event, ui) {
          return _this._onDrop(event, ui);
        },
        hoverClass: "drag-hover",
        out: function(event, ui) {
          return _this._onDropOut(event, ui);
        },
        over: function(event, ui) {
          return _this._onDropOver(event, ui);
        }
      });
      this.$addPanelLink = $(opts.addPanelLink).on("click", function(event) {
        return _this._onClickAddPanel(event);
      });
      return this.$columnParent = $columns.parent();
    },
    _initPanel: function($panel) {
      var $a, url,
        _this = this;
      $ = jQuery;
      url = $panel.data("panel-url");
      if (url) {
        $.ajax({
          dataType: "html",
          success: function(html) {
            return $panel.find("> div").html(html);
          },
          url: url
        });
      }
      $panel.draggable({
        containment: "document",
        drag: function(event, ui) {
          return _this._onDrag(event, ui);
        },
        handle: "h3",
        opacity: 0.5,
        start: function(event, ui) {
          return _this._onDragStart(event, ui);
        },
        stop: function() {
          return _this._onDragStop;
        }
      });
      $a = $panel.find("header a");
      $a.on("click", function(event) {
        if ($a.length) {
          return _this._onRemovePanel(event);
        }
      });
      return null;
    },
    _onClickAddPanel: function(event) {
      var url,
        _this = this;
      $ = jQuery;
      if (this.availablePanels) {
        this._onShowPanelList();
      } else {
        url = $(event.target).attr("href");
        $.getJSON(url, function(data) {
          return _this._onPanelsLoaded(data);
        });
      }
      return false;
    },
    _onDrag: function(event, ui) {
      var $col, $panel, $panels, helper, i, n, offset, opts, panel, panelSel, top, yList, _i;
      opts = this.options;
      $col = this.$activeCol;
      panelSel = opts.panels;
      $panels = $col.find(panelSel);
      offset = ui.offset;
      top = offset.top - $col.offset().top + $col.scrollTop();
      yList = this.yList;
      n = yList.length - 1;
      $panel = null;
      for (i = _i = 0; 0 <= n ? _i <= n : _i >= n; i = 0 <= n ? ++_i : --_i) {
        if ((top >= yList[i]) && (top < yList[i + 1])) {
          $panel = $panels.eq(i);
          if (top > $panel.position().top + $panel.height() / 2) {
            $panel = $panels.eq(i + 1);
          }
          break;
        }
      }
      helper = ui.helper;
      if ($panel && ($panel.length > 0)) {
        panel = $panel.get(0);
        if ((helper.get(0) !== panel) && (this.lastMovedPanel !== panel)) {
          $panel.prevAll(panelSel).not(helper).stop(true, true).animate({
            top: 0
          }, "slow").end().end().nextAll(panelSel).addBack().not(helper).stop(true, true).animate({
            top: helper.outerHeight(true)
          }, "slow");
          this.lastMovedPanel = $panel.get(0);
        }
      } else if (top >= yList[n]) {
        $panels.not(helper).stop(true, true).animate({
          top: 0
        }, "slow");
      }
      return this.$dropBefore = $panel;
    },
    _onDragStart: function(event, ui) {
      return this.$columns.css("padding-bottom", ui.helper.outerHeight(true) + 10);
    },
    _onDragStop: function() {
      return this.$columns.css("padding-bottom", 0);
    },
    _onDrop: function(event, ui) {
      var $col, $dropBefore, $panel, $panelList, col, helper, html, opts, panelAdded, panelDef, panelId, pos, removePanelUrl, url;
      $col = $(event.target);
      opts = this.options;
      helper = ui.helper;
      panelAdded = helper.attr("id").match(/^add-panel-([\w\-]+)$/);
      if (panelAdded) {
        panelId = RegExp.$1;
        panelDef = this.availablePanels[panelId];
        html = "<div id=\"" + panelId + "\" class=\"" + this.widgetBaseClass + "-panel\"\n  data-panel-url=\"" + panelDef.url + "\">\n  <header>\n    <h3>" + panelDef.title + "</h3>";
        removePanelUrl = opts.removePanelUrl;
        if (removePanelUrl) {
          html += "<a href=\"" + removePanelUrl + "\"><i class=\"icon-remove icon-large\"></i></a>";
        }
        html += "  </header>\n  <div style=\"" + panelDef.style + "\"></div>\n</div>";
        $panel = $(html);
        this._initPanel($panel);
        helper.remove();
        $panelList = $(opts.panelList);
        if (!$panelList.find("li").length) {
          $panelList.slideUp();
        }
      } else {
        $panel = helper;
        helper.css({
          left: 0,
          top: 0
        });
      }
      $dropBefore = this.$dropBefore;
      if ($dropBefore) {
        if ($dropBefore.get(0) !== $panel.get(0)) {
          $dropBefore.before($panel);
        }
      } else {
        $col.append($panel);
      }
      this.$panels.stop(true, true).animate({
        top: 0
      }, "slow");
      col = this.$columnParent.find(opts.columns).index($col);
      pos = $col.find(opts.panels).index($panel);
      url = (panelAdded ? opts.addPanelUrl : opts.movePanelUrl);
      if (url) {
        return $.getJSON(url, {
          col: col,
          panelId: $panel.attr("id"),
          pos: pos
        });
      }
    },
    _onDropOut: function(event, ui) {
      return $(event.target).find(this.options.panels).not(ui.helper).stop(true, true).animate({
        top: 0
      }, "slow");
    },
    _onDropOver: function(event) {
      var $col;
      $col = $(event.target);
      this.yList = this._computeYList($col);
      return this.$activeCol = $col;
    },
    _onPanelsLoaded: function(data) {
      this.availablePanels = data;
      this._refreshPanelList();
      return this._onShowPanelList();
    },
    _onRemovePanel: function(event) {
      var $a, $panel, panelId, url;
      $ = jQuery;
      $a = $(event.target).closest("a");
      $panel = $a.parents(this.options.panels);
      panelId = $panel.attr("id");
      url = $a.attr("href");
      $panel.remove();
      $.getJSON(url, {
        panelId: panelId
      });
      this._refreshPanelList();
      return false;
    },
    _onShowPanelList: function() {
      return $(this.options.panelList).slideToggle();
    },
    _refreshPanelList: function() {
      var d, data, html;
      $ = jQuery;
      data = this.availablePanels;
      html = "";
      for (d in data) {
        if (data.hasOwnProperty(d) && $("#" + d).length === 0) {
          html += "<li id=\"add-panel-" + d + "\">" + data[d].title + "</li>";
        }
      }
      return $(this.options.panelList).html(html ? "<ol>" + html + "</ol>" : "").find("li").draggable({
        containment: "#content",
        revert: "invalid"
      });
    }
  };

  $.widget("springcrm.overviewpanels", OverviewPanelsWidget);

}).call(this);
