// Generated by CoffeeScript 1.6.1
(function() {
  var $, InvoicingItemsWidget;

  $ = jQuery;

  InvoicingItemsWidget = {
    INPUT_FIELD_NAMES: ["number", "quantity", "unit", "name", "description", "unitPrice", "tax"],
    options: {
      currency: $("html").data("currency-symbol") || "â‚¬",
      fieldNamePrefix: "items",
      productListUrl: $(".price-table").data("product-list-url"),
      serviceListUrl: $(".price-table").data("service-list-url"),
      taxes: $(".price-table").data("tax-items").split(","),
      units: $(".price-table").data("units").split(",")
    },
    _addItem: function(jumpToNewRow) {
      var $row, index, s, template;
      $ = jQuery;
      template = this.addItemTemplate;
      if (!template) {
        template = $("#add-item-template").mustache();
        this.addItemTemplate = template;
      }
      index = this._getNumRows();
      s = template({
        index: index,
        pos: index + 1,
        zero: 0..formatCurrencyValue()
      });
      $row = $(s);
      this.element.find(".items").append($row);
      this._initUnitAutocomplete($row.find(".unit input"));
      this._initTaxAutocomplete($row.find(".tax input"));
      $row.find("textarea").autosize();
      if (jumpToNewRow) {
        return $("html").scrollTop($row.position().top - $("#toolbar").outerHeight());
      }
    },
    _addTaxRate: function(taxRates, taxRate, tax) {
      var found, tr, _i, _len;
      found = false;
      for (_i = 0, _len = taxRates.length; _i < _len; _i++) {
        tr = taxRates[_i];
        if (tr.taxRate === taxRate) {
          tr.tax += tax;
          found = true;
          break;
        }
      }
      if (!found) {
        return taxRates.push({
          taxRate: taxRate,
          tax: tax
        });
      }
    },
    _computeFooterValues: function() {
      var adjustment, discount, discountPercent, shippingCosts, subtotalGross, subtotalNet, total;
      $ = jQuery;
      subtotalNet = 0;
      this.element.find(".items .total-price output").each(function() {
        return subtotalNet += $(this).text().parseNumber();
      });
      shippingCosts = $("#shippingCosts").val().parseNumber();
      subtotalNet += shippingCosts;
      this.subtotalNet = subtotalNet;
      $("#subtotal-net").text(subtotalNet.formatCurrencyValue());
      this._computeTaxValues();
      subtotalGross = this.subtotalGross;
      discountPercent = $("#discountPercent").val().parseNumber();
      discount = subtotalGross * discountPercent / 100;
      $("#discount-from-percent").text(discount.formatCurrencyValue());
      discount += $("#discountAmount").val().parseNumber();
      adjustment = $("#adjustment").val().parseNumber();
      this.total = total = subtotalGross - discount + adjustment;
      $("#total-price").text(total.formatCurrencyValue());
      return $("#paymentAmount").trigger("change");
    },
    _computeTaxValues: function() {
      var currency, label, s, shippingCosts, shippingTax, subtotalGross, t, taxRates, taxTotal, template, tr, _i, _len,
        _this = this;
      $ = jQuery;
      taxRates = [];
      this.element.find("input:text[name$='.tax']").each(function(index, elem) {
        var els, name, qty, tax, taxRate, unitPrice;
        els = _this.form.elements;
        name = elem.name.replace(/\.tax$/, ".quantity");
        qty = els[name].value.parseNumber();
        name = elem.name.replace(/\.tax$/, ".unitPrice");
        unitPrice = els[name].value.parseNumber();
        taxRate = elem.value.parseNumber();
        if (taxRate !== 0) {
          tax = qty * unitPrice * taxRate / 100.0;
          return _this._addTaxRate(taxRates, taxRate, tax);
        }
      });
      shippingCosts = $("#shippingCosts").val().parseNumber();
      shippingTax = $("#shippingTax").val().parseNumber();
      if (shippingCosts !== 0 && shippingTax !== 0) {
        this._addTaxRate(taxRates, shippingTax, shippingCosts * shippingTax / 100.0);
      }
      taxRates.sort(function(a, b) {
        return a.taxRate - b.taxRate;
      });
      template = this.taxRateSumTemplate;
      if (!template) {
        template = $("#tax-rate-sum-template").mustache();
        this.taxRateSumTemplate = template;
      }
      currency = this.options.currency;
      taxTotal = 0;
      s = "";
      for (_i = 0, _len = taxRates.length; _i < _len; _i++) {
        tr = taxRates[_i];
        t = tr.tax;
        taxTotal += t;
        label = $L("invoicingTransaction.taxRate.label").replace(/\{0\}/, tr.taxRate.format(1));
        s += template({
          label: label,
          value: t.formatCurrencyValue()
        });
      }
      $(".tax-rate-sum").remove();
      $("tfoot tr:first").after(s);
      this.taxTotal = taxTotal;
      this.subtotalGross = subtotalGross = this.subtotalNet + taxTotal;
      $("#subtotal-gross").text(subtotalGross.formatCurrencyValue());
      return subtotalGross;
    },
    _create: function() {
      var el, numItems, opts,
        _this = this;
      $ = jQuery;
      el = this.element;
      this.form = el.parents("form").get(0);
      this.subtotalNet = 0.0;
      this.taxTotal = 0.0;
      this.subtotalGross = 0.0;
      this.total = 0.0;
      opts = this.options;
      this.units = opts.units;
      this.taxes = this._prepareTaxes(opts.taxes);
      this.inputRegExp = new RegExp("^" + opts.fieldNamePrefix + "\\[(\\d+)\\]\\.(\\w+)$");
      el.on("click", ".up-btn", function(event) {
        _this._moveItem($(event.currentTarget), -1);
        return false;
      }).on("click", ".down-btn", function(event) {
        _this._moveItem($(event.currentTarget), 1);
        return false;
      }).on("click", ".remove-btn", function(event) {
        _this._removeItem($(event.currentTarget));
        return false;
      }).on("click", ".select-btn-products", function(event) {
        _this._showSalesItemSelector($(event.currentTarget), "products");
        return false;
      }).on("click", ".select-btn-services", function(event) {
        _this._showSalesItemSelector($(event.currentTarget), "services");
        return false;
      }).on("change", function(event) {
        return _this._onChange(event);
      }).on("focusin", ".currency :input", function(event) {
        var $target, val;
        $target = $(event.currentTarget);
        val = $target.val().parseNumber();
        return $target.val((val ? val.format() : ""));
      }).on("focusout", ".currency :input", function(event) {
        var $target;
        $target = $(event.currentTarget);
        return $target.val($target.val().parseNumber().formatCurrencyValue());
      });
      $(".add-invoicing-item-btn").click(function() {
        _this._addItem(true);
        return false;
      });
      numItems = el.find(".items tr").length;
      if (numItems === 0) {
        this._addItem(false);
      } else {
        this._initUnitAutocomplete();
        this._initTaxAutocomplete();
      }
      return this._computeFooterValues();
    },
    _getInput: function(pos, name, suffix) {
      if (name == null) {
        name = "";
      }
      if (suffix == null) {
        suffix = "";
      }
      return this.form.elements[this._getInputName(pos, name, suffix)];
    },
    _getInputName: function(index, name, suffix) {
      if (name == null) {
        name = "";
      }
      if (suffix == null) {
        suffix = "";
      }
      return "" + this.options.fieldNamePrefix + suffix + "[" + index + "]." + name;
    },
    _getNumRows: function() {
      return this.element.find(".items tr").length;
    },
    _getInputPosAndName: function(input) {
      var parts;
      parts = input.name.match(this.inputRegExp);
      if (parts) {
        parts.shift();
        return parts;
      } else {
        return null;
      }
    },
    _getRowPosition: function($tr) {
      return $tr.index();
    },
    _initTaxAutocomplete: function($input) {
      var taxes;
      taxes = this.taxes;
      if (taxes) {
        if (!$input) {
          $input = $(".tax input");
        }
        return $input.autocomplete({
          source: taxes
        });
      }
    },
    _initUnitAutocomplete: function($input) {
      var units;
      units = this.units;
      if (units) {
        if (!$input) {
          $input = $(".unit input");
        }
        return $input.autocomplete({
          source: units
        });
      }
    },
    _loadSalesItemSelector: function(type, url, pos, params) {
      var $dialog,
        _this = this;
      $dialog = $("#inventory-selector-" + type);
      return $dialog.load(url, params, function() {
        return _this._onLoadSalesItemSelector($dialog, type, pos);
      });
    },
    _moveItem: function($icon, dir) {
      var $destTr, $tr, pos;
      $tr = $icon.parents("tr");
      pos = this._getRowPosition($tr);
      if ((dir < 0) && (pos > 0)) {
        $destTr = $tr.prev();
        $destTr.before($tr);
      } else if (pos < this._getNumRows() - 1) {
        $destTr = $tr.next();
        $destTr.after($tr);
      }
      if ($destTr) {
        this._swapInputItemPos($tr, $destTr);
        return this._swapItemPos($tr, $destTr);
      }
    },
    _onChange: function(event) {
      var index, input, name, parts, qty, unitPrice;
      input = event.target;
      parts = this._getInputPosAndName(input);
      if (parts) {
        index = parts[0];
        name = parts[1];
        if (name === "quantity" || name === "unitPrice") {
          if (name === "quantity") {
            qty = input.value.parseNumber();
            unitPrice = this._getInput(index, "unitPrice").value.parseNumber();
          }
          if (name === "unitPrice") {
            unitPrice = input.value.parseNumber();
            qty = this._getInput(index, "quantity").value.parseNumber();
          }
          $(input).parents("tr").find(".total-price output").text((qty * unitPrice).formatCurrencyValue());
        }
      }
      return this._computeFooterValues();
    },
    _onLoadSalesItemSelector: function($dialog, type, pos) {
      var getData,
        _this = this;
      $ = jQuery;
      getData = function() {
        var search;
        search = $dialog.find("[name=search]").val();
        if (search === "") {
          return null;
        } else {
          return {
            search: search
          };
        }
      };
      return $dialog.off("click").on("click", "a.select-link", function(event) {
        _this._retrieveSalesItem(type, $(event.currentTarget).attr("href"), pos);
        return false;
      }).on("click", "a:not(.select-link)", function(event) {
        _this._loadSalesItemSelector(type, $(event.currentTarget).attr("href"), pos, getData());
        return false;
      }).find("form").submit(function(event) {
        _this._loadSalesItemSelector(type, event.target.action, pos, getData());
        return false;
      }).end().dialog({
        minWidth: 700,
        minHeight: 400,
        modal: true
      });
    },
    _prepareTaxes: function(taxes) {
      var tax, _i, _len, _results;
      if (taxes) {
        _results = [];
        for (_i = 0, _len = taxes.length; _i < _len; _i++) {
          tax = taxes[_i];
          if (typeof tax === "number") {
            _results.push((tax * 100).format());
          }
        }
        return _results;
      } else {
        return null;
      }
    },
    _removeItem: function($icon) {
      if (this._getNumRows() > 1) {
        this._removeRow($icon.parents("tr"));
        return this._computeFooterValues();
      }
    },
    _removeRow: function($tr) {
      var fieldPrefix, pos, re;
      $ = jQuery;
      fieldPrefix = this.options.fieldNamePrefix;
      re = this.inputRegExp;
      pos = this._getRowPosition($tr);
      return $tr.nextAll().each(function(i) {
        var $this, p, prefix, regexp;
        $this = $(this);
        p = pos;
        $this.find("td:first-child").text(String(p + i + 1) + ".");
        prefix = fieldPrefix;
        regexp = re;
        return $this.find(":input").each(function() {
          var parts;
          parts = this.name.match(regexp);
          if (parts) {
            return this.name = "" + prefix + "[" + (p + i) + "]." + parts[2];
          }
        });
      }).end().remove();
    },
    _retrieveSalesItem: function(type, url, pos) {
      var self,
        _this = this;
      self = this;
      return $.ajax({
        url: url,
        dataType: "json",
        success: function(data) {
          var els, item, prefix, qty, textArea, total, unitPrice, unitPriceInput;
          prefix = _this._getInputName(pos);
          els = _this.form.elements;
          els[prefix + "number"].value = data.fullNumber;
          item = data.inventoryItem;
          qty = item.quantity;
          els[prefix + "quantity"].value = qty.format();
          els[prefix + "unit"].value = item.unit.name;
          els[prefix + "name"].value = item.name;
          textArea = els[prefix + "description"];
          textArea.value = item.description;
          $(textArea).trigger('autosize.resize');
          unitPrice = item.unitPrice;
          unitPriceInput = els[prefix + "unitPrice"];
          unitPriceInput.value = unitPrice.formatCurrencyValue();
          total = (qty * unitPrice).formatCurrencyValue();
          $(unitPriceInput).parents("tr").find(".total-price output").text(total);
          els[prefix + "tax"].value = (item.taxRate.taxValue * 100.0).format(1);
          _this._computeFooterValues();
          return $("#inventory-selector-" + type).dialog("close");
        }
      });
    },
    _showSalesItemSelector: function($icon, type, url) {
      var opts, pos;
      opts = this.options;
      if (!url) {
        url = (type === "products" ? opts.productListUrl : opts.serviceListUrl);
      }
      if (url) {
        pos = this._getRowPosition($icon.parents("tr"));
        return this._loadSalesItemSelector(type, url, pos);
      }
    },
    _swapInputItemPos: function($tr, $destTr) {
      var destPos, f, fieldNames, form, pos;
      fieldNames = this.INPUT_FIELD_NAMES;
      form = this.form;
      f = function(name, newName) {
        var el, elems, fieldName, _i, _len, _results;
        elems = form.elements;
        _results = [];
        for (_i = 0, _len = fieldNames.length; _i < _len; _i++) {
          fieldName = fieldNames[_i];
          el = elems[name + fieldName];
          _results.push(el.name = newName + fieldName);
        }
        return _results;
      };
      pos = this._getRowPosition($tr);
      destPos = this._getRowPosition($destTr);
      f(this._getInputName(pos), this._getInputName(destPos, "", "-dest"));
      f(this._getInputName(destPos), this._getInputName(pos));
      return f(this._getInputName(destPos, "", "-dest"), this._getInputName(destPos));
    },
    _swapItemPos: function($tr, $destTr) {
      var $destTd, $td, s;
      $td = $tr.find("td:first-child");
      $destTd = $destTr.find("td:first-child");
      s = $td.text();
      $td.text($destTd.text());
      return $destTd.text(s);
    }
  };

  $.widget("springcrm.invoicingitems", InvoicingItemsWidget);

}).call(this);
