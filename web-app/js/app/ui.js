// Generated by CoffeeScript 1.6.1
(function() {
  var $, AddrFieldsWidget, AutoCompleteExWidget, FontSizeWidget, JQueryUiExt, JQueryUiStaticExt, LightboxWidget, RemoteListWidget;

  $ = jQuery;

  JQueryUiStaticExt = {
    alert: function(msg) {
      window.alert(msg);
      return this;
    },
    confirm: function(msg) {
      return window.confirm(msg);
    }
  };

  $.extend(JQueryUiStaticExt);

  JQueryUiExt = {
    deleteConfirm: function() {
      return this.filter("[href]").on("click", function() {
        var $this, res, url;
        res = $.confirm($L("default.delete.confirm.msg"));
        if (res) {
          $this = $(this);
          url = $this.attr("href");
          url += (url.indexOf("?") < 0 ? "?" : "&") + "confirmed=1";
          $this.attr("href", url);
        }
        return res;
      }).end();
    },
    disable: function() {
      return this.each(function() {
        return $(this).attr("disabled", "disabled").addClass("disabled");
      });
    },
    enable: function() {
      return this.each(function() {
        return $(this).removeAttr("disabled").removeClass("disabled");
      });
    },
    reverse: [].reverse,
    sortElements: function(comparator, getSortable) {
      var document, placements;
      getSortable = getSortable || function() {
        return this;
      };
      document = window.document;
      placements = this.map(function() {
        var nextSibling, parentNode, sortElement;
        sortElement = getSortable.call(this);
        parentNode = sortElement.parentNode;
        nextSibling = parentNode.insertBefore(document.createTextNode(""), sortElement.nextSibling);
        return function() {
          if (parentNode === this) {
            throw new Error("You can't sort elements if any one is a descendant of another.");
          }
          parentNode.insertBefore(this, nextSibling);
          return parentNode.removeChild(nextSibling);
        };
      });
      return [].sort.call(this, comparator).each(function(i) {
        return placements[i].call(getSortable.call(this));
      });
    },
    toggleEnable: function(enable) {
      var b;
      b = $.type(enable) === "boolean" ? enable : $(enable).is(":checked");
      if (b) {
        return this.enable();
      } else {
        return this.disable();
      }
    }
  };

  $.fn.extend(JQueryUiExt);

  FontSizeWidget = {
    options: {
      currentSize: "11px",
      numItems: 5,
      url: null
    },
    _create: function() {
      var $ul, DEF_SIZE, baseClass, clsCurrent, currentSize, i, n, offset, opts, size, _i, _results,
        _this = this;
      DEF_SIZE = 11;
      $ = jQuery;
      baseClass = this.widgetBaseClass;
      $ul = $("<ul/>").addClass("" + baseClass + "-selector").click(function(event) {
        return _this._onChangeFontSize(event);
      }).appendTo(this.element);
      opts = this.options;
      currentSize = parseInt(opts.currentSize, 10);
      n = opts.numItems;
      offset = Math.floor(n / 2);
      clsCurrent = "" + baseClass + "-current";
      _results = [];
      for (i = _i = 0; 0 <= n ? _i <= n : _i >= n; i = 0 <= n ? ++_i : --_i) {
        size = DEF_SIZE - offset + i;
        _results.push($("<li/>", {
          "class": (size === currentSize ? clsCurrent : null),
          style: "font-size: " + size + "px;",
          text: "A"
        }).appendTo($ul));
      }
      return _results;
    },
    _destroy: function() {
      return this.element.remove("ul");
    },
    _onChangeFontSize: function(event) {
      var $target, clsCurrent, fontSize, url;
      $ = jQuery;
      $target = $(event.target);
      fontSize = $target.css("font-size");
      $("body").css("font-size", fontSize);
      clsCurrent = "" + this.widgetBaseClass + "-current";
      $target.addClass(clsCurrent).siblings("." + clsCurrent).removeClass(clsCurrent);
      url = this.options.url;
      if (url) {
        return $.get(url, {
          key: "fontSize",
          value: fontSize
        });
      }
    }
  };

  $.widget("springcrm.fontsize", FontSizeWidget);

  AutoCompleteExWidget = {
    options: {
      combobox: true,
      labelProp: "name",
      loadParameters: {},
      lookupUrl: null,
      noSelectValue: "null",
      url: null,
      valueInput: null,
      valueProp: "id"
    },
    _create: function() {
      var clsCombobox, el, opts, parentOpts,
        _this = this;
      $ = jQuery;
      parentOpts = {};
      this._prepareOptions();
      opts = this.options;
      $.extend(parentOpts, opts);
      el = this.element;
      el.autocomplete(parentOpts).focus(function() {
        return _this._onFocus();
      }).blur(function() {
        return _this._onBlur();
      });
      this.valueInput = this._getValueInput();
      if (opts.combobox) {
        clsCombobox = "" + this.widgetBaseClass + "-combobox";
        return el.addClass(clsCombobox).after($("<button/>", {
          "class": clsCombobox,
          click: function(event) {
            return _this._onClickComboboxBtn(event);
          },
          text: "...",
          type: "button"
        }));
      }
    },
    _getValueInput: function() {
      var el, name, v, valueInput;
      $ = jQuery;
      valueInput = null;
      v = this.options.valueInput;
      if (v) {
        if ($.type(v) === "string") {
          valueInput = $(v);
        }
      } else {
        el = this.element;
        name = el.attr("name");
        if (name) {
          valueInput = $(":input[name=" + name + ".id]");
        } else {
          name = el.attr("id");
          if (name) {
            valueInput = $("#" + name + "\\.id");
            if (!valueInput.length) {
              valueInput = $("#" + name + "-id");
            }
          }
        }
      }
      return valueInput;
    },
    _load: function(request, response) {
      var opts, p, params, url,
        _this = this;
      opts = this.options;
      url = opts.url;
      if (url) {
        $ = jQuery;
        p = opts.loadParameters;
        params = {};
        if (p) {
          params = ($.isFunction(p) ? p.call(this) : p);
        }
        params.name = request.term;
        return $.getJSON(url, params, function(data) {
          var labelProp, valueProp;
          opts = _this.options;
          labelProp = opts.labelProp;
          valueProp = opts.valueProp;
          return response($.map(data, function(item) {
            return {
              label: item[labelProp],
              value: item[valueProp]
            };
          }));
        });
      }
    },
    _onBlur: function() {
      var el, val, valueInput;
      el = this.element;
      val = el.val();
      valueInput = this.valueInput;
      if (val === "") {
        return valueInput.val(this.options.noSelectValue);
      } else {
        valueInput.val(this.oldValue);
        return el.val(this.oldLabel);
      }
    },
    _onClickComboboxBtn: function(event) {
      var el;
      el = this.element;
      if (el.autocomplete("widget").is(":visible")) {
        el.autocomplete("close");
        return;
      }
      $(event.target).blur();
      el.autocomplete("search", "%");
      return el.focus();
    },
    _onFocus: function() {
      this.oldValue = this.valueInput.val();
      return this.oldLabel = this.element.val();
    },
    _onFocusItem: function(event, ui) {
      return $(event.target).val(ui.item.label);
    },
    _onSelect: function(event, ui) {
      var item, s;
      item = ui.item;
      s = item.label;
      this.oldLabel = s;
      this.element.val(s);
      s = item.value;
      this.oldValue = s;
      return this.valueInput.val(s);
    },
    _prepareOptions: function() {
      var el, focus, opts, select, self, url,
        _this = this;
      el = this.element;
      self = this;
      opts = this.options;
      if (!opts.source) {
        url = opts.url || el.data("find-url");
        if (url) {
          opts.url = url;
          opts.source = function(request, response) {
            return _this._load(request, response);
          };
        }
      }
      select = opts.select;
      opts.select = function() {
        _this._onSelect.apply(_this, arguments);
        if (select) {
          select.apply(_this, arguments);
        }
        return false;
      };
      focus = opts.focus;
      opts.focus = function() {
        _this._onFocusItem.apply(_this, arguments);
        if (focus) {
          focus.apply(_this, arguments);
        }
        return false;
      };
      return this;
    }
  };

  $.widget("springcrm.autocompleteex", $.ui.autocomplete, AutoCompleteExWidget);

  AddrFieldsWidget = {
    ADDRESS_FIELDS: ["Street", "PoBox", "PostalCode", "Location", "State", "Country"],
    options: {
      confirm: function(msg) {
        return $.confirm(msg);
      },
      leftMenuSelector: ".left-address .menu",
      leftPrefix: "billingAddr",
      loadOrganizationUrl: null,
      menuItems: [],
      organizationId: null,
      rightMenuSelector: ".right-address .menu",
      rightPrefix: "shippingAddr"
    },
    addMenuItemCopy: function(side, text) {
      var f,
        _this = this;
      $ = jQuery;
      f = (side === "left" ? this.copyToLeft : this.copyToRight);
      return $("<li/>", {
        text: text,
        click: function() {
          return f.call(_this);
        }
      }).appendTo(this._getMenu(side));
    },
    addMenuItemLoadFromOrganization: function(side, text, propPrefix) {
      var f,
        _this = this;
      f = (side === "left" ? this.loadFromOrganizationToLeft : this.loadFromOrganizationToRight);
      return $("<li/>", {
        text: text
      }).click(function() {
        return f.call(_this, propPrefix);
      }).appendTo(this._getMenu(side));
    },
    copyToLeft: function() {
      var opts;
      opts = this.options;
      return this._copyAddress(opts.rightPrefix, opts.leftPrefix);
    },
    copyToRight: function() {
      var opts;
      opts = this.options;
      return this._copyAddress(opts.leftPrefix, opts.rightPrefix);
    },
    loadFromOrganizationToLeft: function(propPrefix) {
      return this._loadFromOrganization(this.options.leftPrefix, propPrefix);
    },
    loadFromOrganizationToRight: function(propPrefix) {
      return this._loadFromOrganization(this.options.rightPrefix, propPrefix);
    },
    _copyAddress: function(fromPrefix, toPrefix) {
      var addrFields, f, gaf, msg, _i, _len;
      addrFields = this.ADDRESS_FIELDS;
      msg = $L("default.copyAddressWarning." + toPrefix);
      gaf = this._getField;
      if (!this._doesExist(toPrefix) || this.options.confirm(msg)) {
        for (_i = 0, _len = addrFields.length; _i < _len; _i++) {
          f = addrFields[_i];
          gaf(toPrefix, f).val(gaf(fromPrefix, f).val());
        }
      }
      return this;
    },
    _create: function() {
      var el, loadOrganizationUrl, menuItem, menuItems, opts, orgId, _i, _len, _results;
      el = this.element;
      opts = this.options;
      this.leftMenu = el.find(opts.leftMenuSelector);
      this.rightMenu = el.find(opts.rightMenuSelector);
      if (!opts.loadOrganizationUrl) {
        opts.loadOrganizationUrl = el.data("load-organization-url");
      }
      loadOrganizationUrl = opts.loadOrganizationUrl;
      orgId = opts.organizationId;
      menuItems = opts.menuItems;
      _results = [];
      for (_i = 0, _len = menuItems.length; _i < _len; _i++) {
        menuItem = menuItems[_i];
        switch (menuItem.action) {
          case "copy":
            _results.push(this.addMenuItemCopy(menuItem.side, menuItem.text));
            break;
          case "loadFromOrganization":
            if (loadOrganizationUrl && orgId) {
              _results.push(this.addMenuItemLoadFromOrganization(menuItem.side, menuItem.text, menuItem.propPrefix));
            } else {
              _results.push(void 0);
            }
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    },
    _doesExist: function(prefix) {
      var addrField, addrFields, gf, res, _i, _len;
      addrFields = this.ADDRESS_FIELDS;
      gf = this._getField;
      res = false;
      for (_i = 0, _len = addrFields.length; _i < _len; _i++) {
        addrField = addrFields[_i];
        res = res || gf(prefix, addrField).val();
      }
      return res;
    },
    _fillAddress: function(prefix, propPrefix, data) {
      var addrFields, f, gf, msg, _i, _len;
      addrFields = this.ADDRESS_FIELDS;
      msg = $L("default.copyAddressWarning." + prefix);
      gf = this._getField;
      if (!this._doesExist(prefix) || this.options.confirm(msg)) {
        for (_i = 0, _len = addrFields.length; _i < _len; _i++) {
          f = addrFields[_i];
          gf(prefix, f).val(data[propPrefix + f]);
        }
      }
      return this;
    },
    _getField: function(prefix, name) {
      return $("#" + prefix + name);
    },
    _getMenu: function(side) {
      var $menu, $ul;
      $menu = (side === "left" ? this.leftMenu : this.rightMenu);
      $ul = $menu.find("ul");
      if ($ul.length) {
        return $ul;
      } else {
        return $("<div><ul/></div>").appendTo($menu).find("ul");
      }
    },
    _loadFromOrganization: function(prefix, propPrefix) {
      var id, opts, organizationId, self, url,
        _this = this;
      self = this;
      opts = this.options;
      organizationId = opts.organizationId;
      url = opts.loadOrganizationUrl;
      if (url && organizationId) {
        $ = jQuery;
        id = null;
        if ($.isFunction(organizationId)) {
          id = organizationId.call(this);
        } else if ($.type(organizationId) === "string") {
          id = $(organizationId).val();
        } else if ($.type(organizationId) === "number") {
          id = organizationId;
        }
        if (id !== null) {
          $.getJSON(url, {
            id: id
          }, function(data) {
            return _this._fillAddress(prefix, propPrefix, data);
          });
        }
      }
      return this;
    }
  };

  $.widget("springcrm.addrfields", AddrFieldsWidget);

  LightboxWidget = {
    options: {
      imgDir: "img/lightbox",
      imageBtnClose: "lightbox-btn-close.gif",
      imageBtnNext: "lightbox-btn-next.gif",
      imageBtnPrev: "lightbox-btn-prev.gif",
      imageLoading: "lightbox-ico-loading.gif"
    },
    _create: function() {
      var o, opts;
      opts = this.options;
      o = {};
      $.extend(o, opts, {
        imageBtnClose: opts.imgDir + "/" + opts.imageBtnClose,
        imageBtnNext: opts.imgDir + "/" + opts.imageBtnNext,
        imageBtnPrev: opts.imgDir + "/" + opts.imageBtnPrev,
        imageLoading: opts.imgDir + "/" + opts.imageLoading
      });
      return this.element.lightBox(o);
    }
  };

  $.widget("springcrm.lightbox", LightboxWidget);

  RemoteListWidget = {
    options: {
      container: ".fieldset-content",
      returnUrl: null
    },
    _computeUrl: function(url) {
      var el, params;
      el = this.element;
      params = void 0;
      url = url || el.data("load-url");
      params = el.data("load-params");
      if (params) {
        url = $.param.querystring(url, params);
      }
      return url;
    },
    _create: function() {
      var url;
      url = this.element.data("load-url");
      if (url) {
        return this._loadContent(this._computeUrl(url));
      }
    },
    _loadContent: function(url) {
      var el, opts,
        _this = this;
      el = this.element;
      opts = this.options;
      el.find(opts.container).load(url, function() {
        var element, returnUrl;
        $ = jQuery;
        element = el;
        element.find("thead a").add(".paginator a").click(function(event) {
          _this._loadContent(_this._computeUrl($(event.currentTarget).attr("href")));
          return false;
        });
        returnUrl = opts.returnUrl;
        if (returnUrl) {
          element.find("tbody .button").each(function() {
            var $this;
            $this = $(this);
            url = $this.attr("href");
            url += (url.indexOf("?") < 0 ? "?" : "&") + ("returnUrl=" + returnUrl);
            return $this.attr("href", url);
          });
        }
        return element.find(".delete-btn").deleteConfirm();
      });
      return this;
    }
  };

  $.widget("springcrm.remotelist", RemoteListWidget);

  SPRINGCRM.page = (function() {
    var $document, $spinner, $toolbar, doc, init, initAjaxEvents, onChangeDateInput, onChangeQuickAccess, onScrollDocument, onSelectTimeValue, onSubmitForm, timeValues, toolbarOffset, win;
    $ = jQuery;
    win = window;
    doc = win.document;
    $document = $(doc);
    $spinner = $("#spinner");
    $toolbar = $("#toolbar-container");
    toolbarOffset = ($toolbar.length ? $toolbar.offset().top : 0);
    init = function() {
      $ = jQuery;
      if ($toolbar.length) {
        $document.scroll(onScrollDocument);
      }
      $("#search img").on("click", function() {
        doc.forms.searchableForm.submit();
        return false;
      });
      $("#quick-access").change(onChangeQuickAccess);
      $("#print-btn").on("click", function() {
        return win.print();
      });
      $(".submit-btn").click(onSubmitForm);
      $(".delete-btn").deleteConfirm();
      $(".date-input-date").on("change", onChangeDateInput).datepicker({
        changeMonth: true,
        changeYear: true,
        gotoCurrent: true,
        selectOtherMonths: true,
        showButtonPanel: true,
        showOtherMonths: true
      });
      $(".date-input-time").on("change", onChangeDateInput).autocomplete({
        select: onSelectTimeValue,
        source: timeValues
      });
      $("textarea").autosize();
      $spinner.click(function() {
        return $(this).css("display", "none");
      });
      $("#autoNumber").on("change", function() {
        return $("#number").toggleEnable(!this.checked);
      }).triggerHandler("change");
      return initAjaxEvents();
    };
    initAjaxEvents = function() {
      $ = jQuery;
      return $spinner.ajaxSend(function() {
        return $(this).show();
      }).ajaxComplete(function() {
        return $(this).hide();
      });
    };
    onChangeDateInput = function() {
      var baseId, els, otherPartField, partId, type, val;
      if (this.id.match(/^([\w\-.]+)-(date|time)$/)) {
        els = this.form.elements;
        baseId = RegExp.$1;
        partId = RegExp.$2;
        otherPartField = els[("" + baseId + "_") + (partId === "date" ? "time" : "date")];
        type = "";
        val = "";
        if (partId === "date") {
          val += this.value;
          type = "date";
          if (otherPartField) {
            val += " " + otherPartField.value;
            type += "time";
          }
        } else {
          if (otherPartField) {
            val += "" + otherPartField.value + " ";
            type = "date";
          }
          val += this.value;
          type += "time";
        }
        return els[baseId].value = val;
      }
    };
    onChangeQuickAccess = function() {
      var $this, val;
      $this = $(this);
      val = $this.val();
      $this.val("");
      if (val) {
        return win.location.href = val;
      }
    };
    onScrollDocument = function() {
      if ($document.scrollTop() >= toolbarOffset) {
        return $toolbar.addClass("fixed");
      } else {
        return $toolbar.removeClass("fixed");
      }
    };
    onSelectTimeValue = function(event, ui) {
      var $this, item;
      $this = $(this);
      item = ui.item;
      if (item) {
        $this.val(item.value);
      }
      return $this.trigger("change");
    };
    onSubmitForm = function() {
      $ = jQuery;
      $("#" + $(this).data("form")).submit();
      return false;
    };
    timeValues = (function() {
      var h, hh, res, _i;
      res = [];
      for (h = _i = 0; _i <= 23; h = ++_i) {
        hh = h.toString();
        if (hh.length < 2) {
          hh = "0" + hh;
        }
        res.push("" + hh + ":00");
        res.push("" + hh + ":30");
      }
      return res;
    })();
    return init();
  })();

}).call(this);
