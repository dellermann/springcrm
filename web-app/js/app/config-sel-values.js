// Generated by CoffeeScript 1.6.1
(function() {
  var $, $lists, ConfigSelValuesWidget;

  $ = jQuery;

  ConfigSelValuesWidget = {
    _itemsToRemove: [],
    _create: function() {
      var _this = this;
      this.element.on("click", ".edit-btn", function(event) {
        return _this._onClickEditBtn(event);
      }).on("click", ".delete-btn", function(event) {
        return _this._onClickDeleteBtn(event);
      }).on("click", ".add-btn", function() {
        return _this._onClickAddBtn();
      }).on("click", ".restore-btn", function() {
        return _this.restore();
      }).on("click", ".sort-btn", function() {
        return _this._onClickSortBtn();
      }).on("dblclick", "li", function(event) {
        return _this._onDblClickItemList(event);
      }).on("blur", "input", function(event, cancel) {
        return _this._onBlurItemInput(event, cancel);
      }).on("keypress", "input", function(event) {
        return _this._onKeyPressItem(event);
      });
      return this.restore();
    },
    _getTemplate: function() {
      var template;
      template = this.template;
      if (!template) {
        template = $("#config-sel-values-template").mustache();
        this.template = template;
      }
      return template;
    },
    _onBlurItemInput: function(event, cancel) {
      var $input, $li, $span, val;
      if (this.removingRow) {
        return false;
      }
      $input = $(event.currentTarget);
      val = $input.val();
      $li = $input.parents("li");
      if (!cancel) {
        $li.siblings().each(function() {
          if ($(this).find(".value").text() === val) {
            cancel = true;
            val = "";
            return false;
          }
          return true;
        });
      }
      if (val === "") {
        this.removingRow = true;
        $li.remove();
        this.removingRow = false;
      } else {
        $span = $li.find(".value").show();
        if (!cancel) {
          $span.text(val);
        }
        $li.find("i").fadeIn();
        $input.parent().remove();
      }
      return false;
    },
    _onClickAddBtn: function() {
      var $li, s, template;
      template = this.template;
      s = template({
        items: [
          {
            id: -1
          }
        ]
      });
      $li = $(s).find("li");
      this.element.find("ul").data("dirty", true).append($li);
      this._showEditField($li.find(".value"));
      return false;
    },
    _onClickDeleteBtn: function(event) {
      var $li, id;
      $li = $(event.currentTarget).parents("li");
      id = $li.data("item-id");
      if (id && (id !== "-1")) {
        this._itemsToRemove.push(parseInt(id, 10));
      }
      $li.parent().data("dirty", true).end().remove();
      return false;
    },
    _onClickEditBtn: function(event) {
      this._showEditField($(event.currentTarget).prevAll(".value")).parents("ul").data("dirty", true);
      return false;
    },
    _onClickSortBtn: function() {
      $ = jQuery;
      this.element.find("li").sortElements(function(li1, li2) {
        return $(li1).text().compare($(li2).text());
      });
      return false;
    },
    _onDblClickItemList: function(event) {
      var $li;
      $li = $(event.currentTarget);
      if ($li.find("input").length === 0 && !$li.data("item-disabled")) {
        return this._showEditField($li.find(".value")).parents("ul").data("dirty", true);
      }
    },
    _onKeyPressItem: function(event) {
      var $input;
      $input = $(event.currentTarget);
      switch (event.keyCode) {
        case 13:
          $input.trigger("blur");
          return false;
        case 27:
          $input.trigger("blur", [true]);
          return false;
      }
      return true;
    },
    _onLoaded: function(data) {
      var s, template,
        _this = this;
      template = this._getTemplate();
      s = template({
        items: data
      });
      return this.element.html(s).find("ul").data("dirty", false).sortable({
        change: function(event) {
          return $(event.currentTarget).data("dirty", true);
        },
        forcePlaceholderSize: true,
        placeholder: "ui-state-highlight"
      });
    },
    prepareSubmit: function() {
      var $ul, data, el, id, _i, _len, _ref;
      $ = jQuery;
      el = this.element;
      $ul = el.find("ul");
      if ($ul.data("dirty")) {
        data = [];
        $ul.children("li").each(function() {
          var $this, item;
          $this = $(this);
          item = {
            id: parseInt($this.data("item-id"), 10)
          };
          if (!$this.data("item-disabled")) {
            item.name = $this.find(".value").text();
          }
          return data.push(item);
        });
        _ref = this._itemsToRemove;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          id = _ref[_i];
          data.push({
            id: id,
            remove: true
          });
        }
        $("<input type=\"hidden\"/>").attr("name", "selValues." + (el.data("list-type"))).val($.toJSON(data)).appendTo(el);
        return $ul.data("dirty", false);
      }
    },
    restore: function() {
      var _this = this;
      return $.getJSON(this.element.data("load-url"), function(data) {
        return _this._onLoaded(data);
      });
    },
    _showEditField: function($elem) {
      var $span;
      $ = jQuery;
      $span = $("<span class=\"input\"/>").insertAfter($elem);
      $("<input/>", {
        type: "text",
        value: $elem.text()
      }).appendTo($span).focus();
      return $elem.hide().nextAll("i").fadeOut().end();
    }
  };

  $.widget("springcrm.configSelValues", ConfigSelValuesWidget);

  $lists = $(".sel-values-list");

  $lists.configSelValues().parents("form").on("submit", function() {
    $lists.each(function() {
      return $(this).configSelValues("prepareSubmit");
    });
    return true;
  });

}).call(this);
