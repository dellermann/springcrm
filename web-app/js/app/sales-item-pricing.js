// Generated by CoffeeScript 1.6.1
(function() {
  var $, $doc, SalesItemPricing, win;

  $ = jQuery;

  win = window;

  $doc = $(win.document);

  SalesItemPricing = {
    INPUT_FIELD_NAMES: ["quantity", "unit", "name", "type", "relToPos", "unitPercent", "unitPrice"],
    _$finderRow: null,
    _form: null,
    _initialPricingEnabled: false,
    _inputRegExp: null,
    _pricingEnabled: null,
    options: {
      fieldNamePrefix: "pricing.items",
      units: null
    },
    _addItem: function(jumpToNewRow) {
      var $row, index, pos, s, template;
      template = this.addItemTemplate;
      if (!template) {
        template = $("#add-pricing-item-template").mustache();
        this.addItemTemplate = template;
      }
      index = this._getRows().length;
      s = template({
        index: index,
        pos: index + 1,
        zero: 0..formatCurrencyValue()
      });
      $row = $(s);
      this._initItemCtrls($row);
      this.element.find("> .items").append($row);
      this._initUnitAutocomplete($row.find(".unit input"));
      if (jumpToNewRow) {
        pos = $row.position().top - $("#toolbar").outerHeight();
        return $("html, body").animate({
          scrollTop: pos
        }, "slow");
      }
    },
    _computeTotalPrice: function(item) {
      var idx, type, unitPrice;
      idx = this._getIndex(item);
      type = this._getRowType(item);
      if (type === "sum") {
        return this._getCurrentSum(idx - 1);
      }
      unitPrice = this._computeUnitPrice(idx);
      if (unitPrice === null) {
        return null;
      } else {
        return this._getFieldVal(item, "quantity") * unitPrice;
      }
    },
    _computeUnitPrice: function(item) {
      var idx, otherIndex, totalPrice, unitPrice;
      idx = this._getIndex(item);
      unitPrice = null;
      switch (this._getRowType(item)) {
        case "absolute":
          unitPrice = this._getFieldVal(item, "unit-price");
          break;
        case "relativeToPos":
          otherIndex = this._getFieldVal(item, "relative-to-pos");
          if (otherIndex >= 0) {
            totalPrice = this._computeTotalPrice(otherIndex);
            if (totalPrice !== null) {
              unitPrice = (this._getFieldVal(item, "unit-percent") * totalPrice / 100.0).round(2);
            }
          }
          break;
        case "relativeToLastSum":
          otherIndex = this._getLastSumIndex(idx);
          if (otherIndex < 0) {
            unitPrice = (this._getFieldVal(item, "unit-percent") * this._getCurrentSum(idx - 1) / 100.0).round(2);
          } else {
            totalPrice = this._computeTotalPrice(otherIndex);
            if (totalPrice !== null) {
              unitPrice = (this._getFieldVal(item, "unit-percent") * totalPrice / 100.0).round(2);
            }
          }
          break;
        case "relativeToCurrentSum":
          unitPrice = (this._getFieldVal(item, "unit-percent") * this._getCurrentSum(idx - 1) / 100.0).round(2);
      }
      return unitPrice;
    },
    _create: function() {
      var $form, $trs, el, form, initialPricingEnabled, opts, pricingEnabled,
        _this = this;
      $ = jQuery;
      el = this.element;
      opts = this.options;
      opts.units = opts.units || el.data("units").split(",");
      this._inputRegExp = new RegExp("^" + opts.fieldNamePrefix + "\\[(\\d+)\\]\\.(\\w+)$");
      $("#start-pricing").on("click", function() {
        return _this._onClickStartPricing();
      });
      $("#remove-pricing").on("click", function() {
        return _this._onClickRemovePricing();
      });
      $form = el.parents("form");
      this._form = form = $form.get(0);
      this._pricingEnabled = pricingEnabled = form.pricingEnabled;
      this._initialPricingEnabled = initialPricingEnabled = !!pricingEnabled.value;
      $(".hidden :input").attr("disabled", "disabled");
      if (initialPricingEnabled) {
        this._toggleVisibility();
      }
      this._registerClickEvents().on("change", "td.quantity :input, td.unit-percent :input, td.unit-price :input", function() {
        return _this._updateItems();
      }).on("change", "td.type :input", function(event) {
        var $target, $tr, idx;
        $target = $(event.currentTarget);
        $tr = $target.parents("tr");
        _this._initItemCtrls($tr);
        if ($target.val() === "relativeToPos") {
          idx = _this._getFieldVal($tr, "relative-to-pos");
          idx = (idx < 0 ? "" : String(idx + 1) + ".");
          $tr.find("> .relative-to-pos > span").fadeIn();
        } else {
          $tr.find("> .relative-to-pos > span").fadeOut();
        }
        _this._updateReferenceClasses();
        return _this._updateItems();
      }).on("focusin", ".number :input", function() {
        var $this, val;
        $this = $(this);
        val = $this.val().parseNumber();
        return $this.val((val ? val.format() : ""));
      }).on("focusout", ".currency :input", function() {
        var $this;
        $this = $(this);
        return $this.val($this.val().parseNumber().formatCurrencyValue());
      }).on("focusout", ".percentage :input", function() {
        var $this;
        $this = $(this);
        return $this.val($this.val().parseNumber().format(2));
      });
      $trs = this._getRows();
      $trs.each(function(index, elem) {
        return _this._initItemCtrls($(elem));
      });
      this._updateReferenceClasses();
      if ($trs.length) {
        this._initUnitAutocomplete();
      }
      $(".add-pricing-item-btn").on("click", function() {
        _this._addItem(true);
        return false;
      });
      $("#step1-pricing-quantity").on("change", function() {
        return _this._updateItems();
      });
      $("#step1-pricing-unit").on("change", function() {
        return _this._updateItems();
      });
      $("#step2").on("change", function() {
        return _this._updateSalesPricing();
      });
      return $("#step3-quantity").on("change", function() {
        return _this._updateSalesPricing();
      });
    },
    _disableTypeOptions: function(item) {
      var $select, $tr, disableOption, idx, referrer, referrers, _i, _len;
      this._enableTypeOptions(item);
      $tr = this._getRow(item);
      $select = $tr.find("td.type select");
      disableOption = function(name) {
        return $select.children("option[value=" + name + "]").attr("disabled", "disabled");
      };
      idx = this._getIndex(item);
      referrers = this._getReferrers(idx);
      if (referrers.length) {
        disableOption("relativeToPos");
      }
      for (_i = 0, _len = referrers.length; _i < _len; _i++) {
        referrer = referrers[_i];
        if (referrer < idx) {
          disableOption("relativeToLastSum");
          disableOption("relativeToCurrentSum");
          disableOption("sum");
          break;
        }
      }
      return item;
    },
    _enableTypeOptions: function(item) {
      this._getRow(item).find("td.type option:disabled").removeAttr("disabled");
      return item;
    },
    _getCurrentSum: function(idx) {
      var $trs, sum,
        _this = this;
      $ = jQuery;
      $trs = this._getRows();
      if (idx == null) {
        idx = $trs.length - 1;
      }
      sum = 0;
      $trs.slice(0, idx + 1).each(function(i, elem) {
        if (_this._getRowType($(elem)) !== "sum") {
          return sum += _this._computeTotalPrice(i);
        }
      });
      return sum;
    },
    _getField: function(item, name) {
      var sel;
      sel = (name === "total-price" ? "output" : ":input");
      return this._getRow(item).find("> ." + name + " " + sel);
    },
    _getFieldVal: function(item, name) {
      var $field, val;
      $field = this._getField(item, name);
      val = (name === "total-price" ? $field.text() : $field.val());
      if ((name === "quantity") || (name === "unit-percent") || (name === "unit-price") || (name === "total-price")) {
        val = val.parseNumber();
      } else if (name === "relative-to-pos") {
        val = (val === "" ? -1 : val.parseNumber());
      }
      return val;
    },
    _getIndex: function(item) {
      if (typeof item === "number") {
        return item;
      } else {
        return this._getRows().index(item);
      }
    },
    _getInput: function(index, name, suffix) {
      if (name == null) {
        name = "";
      }
      if (suffix == null) {
        suffix = "";
      }
      return this._form.elements[this._getInputName(index, name, suffix)];
    },
    _getInputName: function(index, name, suffix) {
      if (name == null) {
        name = "";
      }
      if (suffix == null) {
        suffix = "";
      }
      return "" + this.options.fieldNamePrefix + suffix + "[" + index + "]." + name;
    },
    _getLastSumIndex: function(idx) {
      var $trs, res,
        _this = this;
      $ = jQuery;
      $trs = this._getRows();
      if (idx == null) {
        idx = $trs.length - 1;
      }
      res = -1;
      $trs.slice(0, idx + 1).reverse().each(function(i, elem) {
        if (_this._getRowType($(elem)) === "sum") {
          res = idx - i;
          return false;
        }
        return true;
      });
      return res;
    },
    _getReferredRow: function(item) {
      var refIdx;
      refIdx = this._getFieldVal(item, "relative-to-pos");
      if (refIdx === -1) {
        return null;
      } else {
        return this._getRow(refIdx);
      }
    },
    _getReferrers: function(idx) {
      var res,
        _this = this;
      $ = jQuery;
      res = [];
      this._getRows().each(function(i, tr) {
        var $tr, refIdx;
        $tr = $(tr);
        if (_this._getFieldVal($tr, "type") === "relativeToPos") {
          refIdx = _this._getFieldVal($tr, "relative-to-pos");
          if (refIdx === idx) {
            return res.push(i);
          }
        }
      });
      return res;
    },
    _getRow: function(item) {
      if (typeof item === "number") {
        return this._getRows().eq(item);
      } else {
        return item;
      }
    },
    _getRows: function(idx) {
      var $trs;
      $trs = this.element.find("> .items > tr");
      if (idx != null) {
        $trs = $trs.slice(0, idx);
      }
      return $trs;
    },
    _getRowType: function(item) {
      return this._getFieldVal(item, "type");
    },
    _initItemCtrls: function(item) {
      var notAbs, notSum, type;
      type = this._getRowType(item);
      this._disableTypeOptions(item);
      notSum = type !== "sum";
      notAbs = type !== "absolute";
      this._getField(item, "quantity").toggleEnable(notSum);
      this._getField(item, "unit").toggleEnable(notSum);
      this._getField(item, "name").toggleEnable(notSum);
      this._getField(item, "unit-percent").toggleEnable(notAbs && notSum);
      return this._getField(item, "unit-price").toggleEnable(!notAbs);
    },
    _initUnitAutocomplete: function($input) {
      var units;
      units = this.options.units;
      if (units) {
        if ($input == null) {
          $input = this.element.find(".unit input");
        }
        return $input.autocomplete({
          source: units
        });
      }
    },
    _moveItem: function($icon, dir) {
      var $destTr, $tr, checkReferee,
        _this = this;
      $tr = $icon.parents("tr");
      checkReferee = function($tr, dir) {
        var $refTr;
        if (dir < 0 && _this._getRowType($tr) === "relativeToPos") {
          $refTr = _this._getReferredRow($tr);
          if ($refTr !== null && _this._getRowType($refTr) !== "absolute" && _this._getIndex($tr) - 1 <= _this._getIndex($refTr)) {
            $.alert($L("salesItem.pricing.error.notMovable.refBeforeReferee"));
            return false;
          }
        }
        return true;
      };
      $destTr = dir < 0 ? $tr.prev() : $tr.next();
      if (!($destTr.length && checkReferee($tr, dir) && checkReferee($destTr, -dir))) {
        return;
      }
      if (dir < 0) {
        $destTr.before($tr);
      } else {
        $destTr.after($tr);
      }
      this._swapInputItemPos($tr, $destTr);
      this._swapItemPos($tr, $destTr);
      this._swapItemReferences($tr, $destTr);
      this._disableTypeOptions($tr);
      this._disableTypeOptions($destTr);
      return this._updateItems();
    },
    _onClickReferenceItem: function($tr) {
      var $finderRow, idx, oldIdx, refIdx;
      $finderRow = this._$finderRow;
      idx = this._getIndex($finderRow);
      refIdx = this._getIndex($tr);
      oldIdx = this._getFieldVal($finderRow, "relative-to-pos");
      if (oldIdx !== -1) {
        this._enableTypeOptions(oldIdx);
      }
      this._setItemReference(idx, refIdx);
      this._disableTypeOptions($tr);
      this._updateReferenceClasses();
      this._updateItems();
      return this._stopFinderMode();
    },
    _onClickRemovePricing: function() {
      var ok;
      if (this._initialPricingEnabled) {
        ok = $.confirm($L("salesItem.pricing.removePricing.confirm"));
        if (!ok) {
          return false;
        }
      }
      this._pricingEnabled.value = "";
      this._toggleVisibility();
      $("#quantity").val($("#step3-quantity").val());
      $("#unit").val($("#step3-unit").val());
      $("#unitPrice").val($("#step3-unit-price").text().parseNumber().formatCurrencyValue());
      return false;
    },
    _onClickStartPricing: function() {
      this._pricingEnabled.value = "1";
      this._toggleVisibility();
      this._addItem(false);
      return false;
    },
    _onKeyDown: function(event) {
      if (this._$finderRow && (event.which === 27)) {
        return this._stopFinderMode();
      }
    },
    _registerClickEvents: function() {
      var _this = this;
      return this.element.on("click", ".up-btn", function(event) {
        _this._moveItem($(event.currentTarget), -1);
        return false;
      }).on("click", ".down-btn", function(event) {
        _this._moveItem($(event.currentTarget), 1);
        return false;
      }).on("click", "tr:not(.not-removable) .remove-btn", function(event) {
        _this._removeItem($(event.currentTarget));
        return false;
      }).on("click", ".relative-to-pos i", function(event) {
        _this._startFinderMode($(event.currentTarget));
        return false;
      });
    },
    _removeItem: function($icon) {
      var $tr, fieldPrefix, index, re,
        _this = this;
      $ = jQuery;
      $tr = $icon.parents("tr");
      fieldPrefix = this.options.fieldNamePrefix;
      index = this._getIndex($tr);
      re = this._inputRegExp;
      $tr.nextAll().each(function(i, tr) {
        var idx, prefix, regexp, type;
        $tr = $(tr);
        idx = index;
        $tr.find("td:first-child").text("" + (idx + i + 1) + ".");
        type = _this._getFieldVal($tr, "type");
        if (type === "relativeToPos") {
          $tr.find("td.relative-to-pos").find("input").each(function() {
            var $this;
            $this = $(this);
            return $this.val($this.val() - 1);
          }).end().find("strong").each(function() {
            var $this;
            $this = $(this);
            return $this.text(parseInt($this.text(), 10) - 1);
          });
        }
        prefix = fieldPrefix;
        regexp = re;
        return $tr.find(":input").each(function() {
          var parts;
          parts = this.name.match(regexp);
          if (parts) {
            return this.name = "" + prefix + "[" + (idx + i) + "]." + parts[2];
          }
        });
      }).end().remove();
      return this._updateItems();
    },
    _setFieldVal: function(item, name, val) {
      var $field;
      $field = this._getField(item, name);
      if ((name === "quantity") || (name === "unit-percent")) {
        val = val.format();
      }
      if ((name === "unit-price") || (name === "total-price")) {
        val = val.formatCurrencyValue();
      }
      if (name === "total-price") {
        return $field.text(val);
      } else {
        return $field.val(val);
      }
    },
    _setItemReference: function(item, refItem) {
      var idx;
      idx = this._getIndex(refItem);
      return this._getRow(item).find("> .relative-to-pos").find("strong").text(String(idx + 1)).end().find("> input").val(idx);
    },
    _startFinderMode: function($icon) {
      var $tr,
        _this = this;
      $tr = $icon.parents("tr");
      this._$finderRow = $tr;
      $tr.addClass("non-selectable").prevAll().each(function(index, tr) {
        $tr = $(tr);
        return $tr.addClass((_this._getRowType($tr) === "relativeToPos" ? "non-" : "") + "selectable");
      }).end().nextAll().each(function(index, tr) {
        $tr = $(tr);
        return $tr.addClass((_this._getRowType($tr) === "absolute" ? "" : "non-") + "selectable");
      });
      this.element.off("click", "**").on("click", "tr.selectable", function(event) {
        return _this._onClickReferenceItem($(event.currentTarget));
      });
      return $doc.on("keydown", function(event) {
        return _this._onKeyDown(event);
      });
    },
    _stopFinderMode: function() {
      this._$finderRow = null;
      this._getRows().removeClass("selectable non-selectable");
      this.element.off("click", "**");
      this._registerClickEvents();
      return $doc.off("keydown");
    },
    _swapInputItemPos: function($tr, $destTr) {
      var destIndex, fieldNames, form, index, name1, name2, name3, swap;
      form = this._form;
      index = this._getIndex($tr);
      destIndex = this._getIndex($destTr);
      fieldNames = this.INPUT_FIELD_NAMES;
      swap = function(name, newName) {
        var el, elems, fieldName, _i, _len;
        elems = form.elements;
        for (_i = 0, _len = fieldNames.length; _i < _len; _i++) {
          fieldName = fieldNames[_i];
          el = elems[name + fieldName];
          if (el) {
            el.name = newName + fieldName;
          }
        }
        return null;
      };
      name1 = this._getInputName(index);
      name2 = this._getInputName(destIndex);
      name3 = this._getInputName(destIndex, "", "-dest");
      swap(name1, name3);
      swap(name2, name1);
      return swap(name3, name2);
    },
    _swapItemPos: function($tr, $destTr) {
      var $destTd, $td, s;
      $td = $tr.find("td:first-child");
      $destTd = $destTr.find("td:first-child");
      s = $td.text();
      $td.text($destTd.text());
      return $destTd.text(s);
    },
    _swapItemReferences: function(item, destItem) {
      var destIdx, destRefs, idx, ref, refs, _i, _j, _len, _len1;
      idx = this._getIndex(item);
      destIdx = this._getIndex(destItem);
      refs = this._getReferrers(idx);
      for (_i = 0, _len = refs.length; _i < _len; _i++) {
        ref = refs[_i];
        this._setItemReference((ref === destIdx ? idx : ref), destIdx);
      }
      destRefs = this._getReferrers(destIdx);
      for (_j = 0, _len1 = destRefs.length; _j < _len1; _j++) {
        ref = destRefs[_j];
        this._setItemReference((ref === idx ? destIdx : ref), idx);
      }
      return item;
    },
    _toggleVisibility: function() {
      return $(".toggle-visibility").filter(".hidden").find(":input").removeAttr("disabled").end().end().toggleClass("hidden").filter(".hidden").find(":input").attr("disabled", "disabled");
    },
    _updateItem: function(item) {
      var totalPrice, unitPrice;
      totalPrice = this._computeTotalPrice(item);
      unitPrice = this._computeUnitPrice(item);
      if (unitPrice !== null) {
        this._setFieldVal(item, "unit-price", unitPrice);
      }
      if (totalPrice !== null) {
        return this._setFieldVal(item, "total-price", totalPrice);
      }
    },
    _updateItems: function() {
      var quantity, s, sum, sumText,
        _this = this;
      $ = jQuery;
      sum = this._getCurrentSum();
      sumText = sum.formatCurrencyValue();
      this._getRows().each(function(idx, elem) {
        return _this._updateItem($(elem));
      });
      $("#step1-total-price").text(sumText);
      $("#step2-total-price").text(sumText);
      quantity = $("#step1-pricing-quantity").val().parseNumber();
      s = quantity.format();
      $("#step2-quantity").text(s);
      $("#step2-total-quantity").text(s);
      s = $("#step1-pricing-unit option:selected").text();
      $("#step2-unit").text(s);
      $("#step2-total-unit").text(s);
      s = (sum / quantity).formatCurrencyValue();
      $("#step1-unit-price").text(s);
      $("#step2-unit-price").text(s);
      return this._updateSalesPricing();
    },
    _updateReferenceClasses: function() {
      var _this = this;
      $ = jQuery;
      return this._getRows().each(function(i, elem) {
        var $elem, referrers;
        $elem = $(elem);
        referrers = _this._getReferrers(i);
        if (referrers.length) {
          return $elem.addClass("not-removable");
        } else {
          return $elem.removeClass("not-removable");
        }
      });
    },
    _updateSalesPricing: function() {
      var adjustment, discountPercent, discountPercentAmount, qty, s, step3Qty, totalPrice;
      discountPercent = $("#step2-discount-percent").val().parseNumber();
      totalPrice = $("#step2-total-price").text().parseNumber();
      discountPercentAmount = discountPercent * totalPrice / 100;
      $("#step2-discount-percent-amount").text(discountPercentAmount.formatCurrencyValue());
      adjustment = $("#step2-adjustment").val().parseNumber();
      totalPrice += adjustment - discountPercentAmount;
      s = totalPrice.formatCurrencyValue();
      $("#step2-total").text(s);
      $("#step3-total-price").text(s);
      qty = $("#step1-pricing-quantity").val().parseNumber();
      $("#step2-total-unit-price").text(qty === 0 ? "---" : (totalPrice / qty).formatCurrencyValue());
      step3Qty = $("#step3-quantity").val().parseNumber();
      return $("#step3-unit-price").text(step3Qty === 0 ? "---" : (totalPrice / step3Qty).formatCurrencyValue());
    }
  };

  $.widget("springcrm.salesitempricing", SalesItemPricing);

  $("#step1-pricing-items").salesitempricing();

}).call(this);
